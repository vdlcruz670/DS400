---
title: "Naive Bayes Breast Cancer"
format: html
editor: visual
---

## Dataset & Paper:

The ***Breast Cancer Wisconsin (Diagnostic)*** dataset is a renowned collection of data used extensively in machine learning and medical research. Originating from digitized images of fine needle aspirates (FNA) of breast masses, this dataset facilitates the analysis of cell nuclei characteristics to aid in the diagnosis of breast cancer. In this article, we delve into the attributes, statistics, and significance of this dataset.

[*A new classifier for breast cancer detection based on Na√Øve Bayesian*](https://www.sciencedirect.com/science/article/abs/pii/S0263224115002419)

### Libraries

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(e1071)
library(here)
library(ggcorrplot)
library(ggpubr)
library(janitor)
library(plotly)
options(scipen = 999)
```

### Read in Data

```{r, warning=FALSE, message=FALSE}
breast_cancer_data <- read_csv(here("data/wisconsin_breast_cancer_data.csv"))
```

### Correlation Matrix

Let's test the assumption that are features are independent from each other

Drop columns that we don't need in the correlation matrix

```{r}
breast_cancer_data_cor <- breast_cancer_data %>% 
  select(-id, -diagnosis, -...33)
```

Create a matrix from the dataframe

```{r}
breast_cancer_matrix <- as.matrix(breast_cancer_data_cor)
```

Calculate the correlations using `cor()`

```{r}
breast_cancer_correlations <- cor(breast_cancer_matrix)
```

Plot the correlations

```{r}
ggcorrplot(breast_cancer_correlations, type = "lower", lab = TRUE, lab_size = 1)
```

visualizing correlations between two features

```{r}
ggplot(breast_cancer_data, aes(x = radius_mean, y = perimeter_mean)) +
  geom_point() +
  geom_smooth() +
  stat_cor()
```

### Create a Naive Bayes Model

```{r}
breast_cancer_mod <- naiveBayes(diagnosis ~., data = breast_cancer_data)
```

```{r}
breast_cancer_mod
```

predict diagnosis in breast cancer dataset

```{r}
breast_cancer_data <- breast_cancer_data %>% 
  mutate(predicted_diagnosis = predict(breast_cancer_mod, newdata = .))
```

create the confusion matrix

```{r}
breast_cancer_data %>% 
  tabyl(diagnosis, predicted_diagnosis) %>% 
  adorn_percentages("row") %>% 
  adorn_pct_formatting(digits = 2) %>%
  adorn_ns
```

### Assuming normal distributions

```{r}
area_mean_density <- ggplot(breast_cancer_data, aes(x = area_mean, fill = diagnosis)) +
  geom_density(alpha = 0.7) +
  theme_minimal() +
  scale_fill_viridis_d(option = "magma")

ggplotly(area_mean_density)
```

```{r}

# Parameters for the first normal distribution
mean1 <- 978.3764
sd1 <- 367.9380

# Parameters for the second normal distribution
mean2 <- 463.5817
sd2 <- 133.6395

# Create a data frame for both normal distributions
x <- seq(min(mean1 - 4*sd1, mean2 - 4*sd2), max(mean1 + 4*sd1, mean2 + 4*sd2), length.out = 1000)
y1 <- dnorm(x, mean = mean1, sd = sd1)
y2 <- dnorm(x, mean = mean2, sd = sd2)

# Round values to 5 decimal places for tooltips
normal_data <- data.frame(
  x = x, 
  y1 = round(y1, 5), 
  y2 = round(y2, 5)
)

# Create the ggplot with both normal distributions
normal_dist_plot <- ggplot(normal_data, aes(x = x)) +
  geom_line(aes(y = y1, color = "Distribution 1")) +
  geom_line(aes(y = y2, color = "Distribution 2")) +
  labs(title = "Assumed Normal Distributions", x = "area mean", y = "Density") +
  scale_color_manual(values = c("Distribution 1" = "gold", "Distribution 2" = "grey")) +
  theme_minimal() +
  xlim(143, 2500)

# Make the plot interactive and round tooltips to 5 decimal places
ggplotly(normal_dist_plot, tooltip = c("x", "y"))


```

### Assigning Probabilities to Benign and Malignant

```{r}
breast_cancer_data <- breast_cancer_data %>% 
  mutate(predicted_diagnosis_raw = predict(breast_cancer_mod, newdata = ., type = "raw"))
```

```{r}
prediction_hist <- ggplot(breast_cancer_data, aes(x = predicted_diagnosis_raw[, "B"], fill = diagnosis)) +
  geom_histogram(bins = 100) +
  theme_minimal()+
  scale_fill_viridis_d()

ggplotly(prediction_hist)
```

### Investigating False Negatives

```{r}
breast_cancer_data <- breast_cancer_data %>%
  mutate(confusion_category = case_when(
    diagnosis == "M" & predicted_diagnosis == "M" ~ "True Positive",
    diagnosis == "M" & predicted_diagnosis == "B" ~ "False Negative",
    diagnosis == "B" & predicted_diagnosis == "B" ~ "True Negative",
    diagnosis == "B" & predicted_diagnosis == "M" ~ "False Positive",
    TRUE ~ "Unknown"  # For any unforeseen cases, if needed
  ))

```

```{r}
table(breast_cancer_data$confusion_category)
```

```{r}
smoothness_worst_density <- ggplot(breast_cancer_data, aes(x = smoothness_worst, fill = confusion_category)) +
  geom_density(alpha = 0.5) +
  theme_minimal() +
  scale_fill_viridis_d(option = "magma")

ggplotly(smoothness_worst_density)
```

```{r}
area_density_plot <- ggplot(breast_cancer_data, aes(x = area_mean, fill = confusion_category)) +
  geom_density(alpha = 0.5) +
  theme_minimal() +
  scale_fill_viridis_d(option = "magma") 

ggplotly(area_density_plot)
```
